/***************************************************************************
 Week 10 assignment
 Name: Huang Jiaming
 Student ID: 11207964
 NSID: jih211
 lecture session: Michael C. Horsch / Garrett
 ****************************************************************************/

Exercise 1

refToNode reverseNodes(refToNode rNode)
pre::rNode: a reference to Node
post:: list get reversed
return::temp: reference to the head of reversed list

if (rNode == NULL or rNode->next == NULL)
	return rNode
else
	refToNode temp <- reverseNodes(rNode->next)
	rNode->next->next <- rNode
	rNode->next <- NULL
	return temp

time complexity: O(n)
In every single recursion process, the operation steps is a constant. A list consisted of n nodes will enter n recursion processes. so the time complexity is O(n).

/***************************************************************************/

Exercise 2

void destroyNodes(refToNode rNode)
pre::rNode: a reference to Node
post:: recursivele destroy the list
return:: nothing

	if (rNode == NULL)
		return
	destroyNodes(rNode->next)
	delete rNode

/***************************************************************************/

Exercise 3

struct Class
	const refToChar className
	int capacity
	refToList enrolled
	refToQueue waitList
end struct

refToClass createClass(const refToChar name, int cap)
pre::name: a const string to be assigned to class,
	 cap: capacity to be assigned to class
post::create a class struct
return::newClass: reference to Class struct

	refToClass newClass <- allocate Class
	newClass->className <- name
	newClass->capacity <- cap
	newClass->enrolled <- createList()
	newClass->waitList <- createQueue()
	return newClass


void destroyClass(refToClass p)
pre::p: reference to Class
post:: class pointed by p is destroyed
return:: nothing

	destroyList(p->enrolled)
	destroyQueue(p->waitList)
	deallocate p


void addStudent(refToClass p, Student stu)
pre::p: reference to Class
	 stu: Student element to be added to Class p
post:: add stu to the list or the queue
return:: nothing

	int currentStu <- ListCount(p->enrolled)
	if (currentStu < p->capaticy)
		insertTail(p->enrolled, stu)
	else
		enQueue(p->waitList, stu)


void dropStudent(refToClass p, int stuID)
pre::p: reference to Class
	 stuID: student ID with which to drop class
post:: delete student from enrolled list, dequeue from the waitlist and add to the list
return:: nothing

	Student stuDel, stuAdd
	deleteElement(p->enrolled, stuID, &stuDel)
	deQueue(p->waitList, &stuAdd)
	addStudent(p,stuAdd)

/***************************************************************************/

Exercise 5

float postOrder(refToTree expTree)
pre::expTree: reference to a expression tree
post:: calculate the result in post-order.store the result in the data field of expTree
return::expTree->data: the final result

if (expTree->leftSubtree != NULL)
	postOrder(expTree->leftSubtree)
	postOrder(expTree->rightSubtree)
	process(expTree)
	return expTree->data
end if

void process(refToTree p)
pre::p: reference to a minimal expression tree
post:: calculate  the result and store the result at p->data
return:: nothing

switch(p->data)
{
	case '+':
		p->data = p->leftSubtree->data + p->rightSubtree->data
		break
	case '-':
		p->data = p->leftSubtree->data - p->rightSubtree->data
		break
	case '*':
		p->data = p->leftSubtree->data * p->rightSubtree->data
		break
	case '/':
		p->data = p->leftSubtree->data / p->rightSubtree->data
		break
	default:
		print "unknown operator!"
}














